{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sendText","remote","send","sendJSON","payload","emitEvent","emit","state","isPlaying","tempo","message","handleInputChange","bind","assertThisInitialized","connectToRemote","window","addEventListener","err","_this2","JSON","stringify","on","text","console","log","json","data","event","target","value","type","checked","parseInt","name","setState","defineProperty","react_default","a","createElement","style","textAlign","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAMqBA,cACnB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAgIFI,SAAW,WACTP,EAAKQ,OAAOC,KAAK,UAlILT,EAqIdU,SAAW,WACTV,EAAKQ,OAAOE,SAAS,CACnBC,QAAS,WAvICX,EA2IdY,UAAY,WACVZ,EAAKQ,OAAOK,KAAK,sBAAuB,CACtCF,QAAS,WA3IXX,EAAKc,MAAQ,CACXC,WAAW,EACXC,MAAO,GACPC,QAAS,MAEXjB,EAAKkB,kBAAoBlB,EAAKkB,kBAAkBC,KAAvBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KAPbA,sNAWQqB,mCAApBlB,KAAKK,cAELL,KAAKK,OAAOK,KAAK,aACjBS,OAAOC,iBACL,QACA,SAAAC,GAAG,OAAIC,EAAKjB,OAAOK,KAAK,MAAOa,KAAKC,UAAUH,MAC9C,GAEFrB,KAAKK,OAAOoB,GAAG,OAAQ,SAAAC,GAAI,OAAIC,QAAQC,IAAIF,KAC3C1B,KAAKK,OAAOoB,GAAG,OAAQ,SAAAI,GAAI,OAAIF,QAAQC,IAAIC,KAC3C7B,KAAKK,OAAOoB,GAAG,uBAAwB,SAAAK,GAAI,OAAIH,QAAQC,IAAIE,KAE3D9B,KAAKK,OAAOC,KAAK,2BACjBN,KAAKK,OAAOE,SAAS,CACnBC,QAAS,sBAGXR,KAAKK,OAAOK,KAAK,4BAA6B,CAC5CF,QAAS,2KAIKuB,GAChB,IAAMC,EAASD,EAAMC,OACfC,EACY,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUC,SAASJ,EAAOC,OAC1DI,EAAOL,EAAOK,KAEpBrC,KAAKsC,SAALxC,OAAAyC,EAAA,EAAAzC,CAAA,GACGuC,EAAOJ,qCAsEV,OACEO,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,UAAW,WACvBJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQG,QAAS7C,KAAKI,UAAtB,oBAGFoC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQG,QAAS7C,KAAKO,UAAtB,oBAGFiC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQG,QAAS7C,KAAKS,WAAtB,8BAGF+B,EAAAC,EAAAC,cAAA,SAAI1C,KAAKW,MAAMG,QAAUd,KAAKW,MAAMG,QAAU,cA7HrBgC,aCMbC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2954eae0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Song, Sequencer, Sampler, Synth } from 'react-music';\nimport Polysynth from './lib/poly';\n\nimport { connectToRemote } from 'react-native-webview-messaging/web';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isPlaying: false,\n      tempo: 90,\n      message: null\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  async componentDidMount() {\n    this.remote = await connectToRemote();\n\n    this.remote.emit('connected');\n    window.addEventListener(\n      'error',\n      err => this.remote.emit('log', JSON.stringify(err)),\n      true\n    );\n    this.remote.on('text', text => console.log(text));\n    this.remote.on('json', json => console.log(json));\n    this.remote.on('custom-event-from-rn', data => console.log(data));\n\n    this.remote.send('plain text from WebView');\n    this.remote.sendJSON({\n      payload: 'JSON from WebView'\n    });\n\n    this.remote.emit('custom-event-from-webview', {\n      payload: 'Custom event from WebView'\n    });\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value =\n      target.type === 'checkbox' ? target.checked : parseInt(target.value);\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  /*render() {\n    const { isPlaying, tempo } = this.state;\n    return (\n      <div className=\"App\">\n        <label>Play</label>\n        <input\n          name=\"isPlaying\"\n          type=\"checkbox\"\n          checked={isPlaying}\n          onChange={this.handleInputChange}\n        />\n        <label>Tempo</label>\n        <input\n          name=\"tempo\"\n          type=\"string\"\n          value={tempo}\n          onChange={this.handleInputChange}\n        />\n        {isPlaying && (\n          <Song playing={isPlaying} tempo={tempo}>\n            <Sequencer resolution={16} bars={1}>\n              <Sampler\n                sample={require('./samples/kick.wav')}\n                steps={[0, 2, 8, 10]}\n              />\n              <Sampler\n                sample={require('./samples/snare.wav')}\n                steps={[4, 12]}\n              />\n            </Sequencer>\n            <Sequencer resolution={16} bars={2}>\n              <Polysynth\n                steps={[\n                  [0, 1, ['c3', 'd#3', 'g3']],\n                  [2, 1, ['c4']],\n                  [8, 1, ['c3', 'd#3', 'g3']],\n                  [10, 1, ['c4']],\n                  [12, 1, ['c3', 'd#3', 'g3']],\n                  [14, 1, ['d#4']],\n                  [16, 1, ['f3', 'g#3', 'c4']],\n                  [18, 1, ['f3', 'g#3', 'c4']],\n                  [24, 1, ['f3', 'g#3', 'c4']],\n                  [26, 1, ['f3', 'g#3', 'c4']],\n                  [28, 1, ['f3', 'g#3', 'c4']],\n                  [30, 1, ['f3', 'g#3', 'c4']]\n                ]}\n              />\n            </Sequencer>\n            <Sequencer resolution={16} bars={2}>\n              <Synth\n                type=\"sine\"\n                steps={[\n                  [0, 8, 'c2'],\n                  [8, 4, 'c2'],\n                  [12, 4, 'd#2'],\n                  [16, 8, 'f2'],\n                  [24, 8, 'f1']\n                ]}\n              />\n            </Sequencer>\n          </Song>\n        )}\n      </div>\n    );\n  }*/\n  render() {\n    return (\n      <div style={{ textAlign: 'center' }}>\n        <div>\n          <button onClick={this.sendText}>Send text to RN</button>\n        </div>\n\n        <div>\n          <button onClick={this.sendJSON}>Send JSON to RN</button>\n        </div>\n\n        <div>\n          <button onClick={this.emitEvent}>Emit greeting event to RN</button>\n        </div>\n\n        <p>{this.state.message ? this.state.message : null}</p>\n      </div>\n    );\n  }\n\n  sendText = () => {\n    this.remote.send('hello');\n  };\n\n  sendJSON = () => {\n    this.remote.sendJSON({\n      payload: 'hello'\n    });\n  };\n\n  emitEvent = () => {\n    this.remote.emit('greetingFromWebview', {\n      payload: 'hello'\n    });\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}